name: "Build"

on:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

      steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Set up python
          uses: actions/setup-python@v2.2.1
          with:
            python-version: 3.9

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install flake8 pytest
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

        - name: Lint with flake8
          run: |
            # stop the build if there are Python syntax errors or undefined names
            flake8 helloworld --count --select=E9,F63,F7,F82 --show-source --statistics
            # exit-zero treats all errors as warnings
            flake8 helloworld tests --count --exit-zero --max-complexity=10 --max-line-length=150 --statistics

        - name: Test with pytest
          run: |
            pytest tests

  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1.3.2

      - name: Terraform init
        run: terraform init -input=false
        working-directory: terraform

      - name: Terraform validate
        run: terraform validate -no-color
        working-directory: terraform

      - name: Terraform plan
        id: plan
        run: terraform plan -input=false -no-color
        working-directory: terraform
        continue-on-error: true

      - name: Github comment
        uses: actions/github-script@v3.1.0
        env:
          STDOUT: "```${{ steps.plan.outputs.stdout }}```"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.STDOUT
            })
